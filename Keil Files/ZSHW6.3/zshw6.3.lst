


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *
    2 00000000         ; CS 2400 Homework 6
    3 00000000         ; By: Zachary Stall
    4 00000000         ; Version: 3
    5 00000000         ;
    6 00000000         ; This program generates 11 random numbers using the RAN
                       DOM.s file
    7 00000000         ; from Dr. Georgiev at MSU Denver. The random numbers ar
                       e stored in
    8 00000000         ; a location who's address is stored in 'numbers'. It th
                       en bubble sorts 
    9 00000000         ; the random numbers. Once sorted, the program counts ho
                       w many ones
   10 00000000         ; each random number has, and stores this information at
                        a destination
   11 00000000         ; stored in 'ones'.
   12 00000000         ;
   13 00000000         ;Note: Use for memory map: 0x00000000, 0xFFFFFFFF
   14 00000000         ;*******************************************************
                       *
   15 00000000         
   16 00000000                 AREA             ZSHW6, CODE, READWRITE
   17 00000000                 EXPORT           zshw6
   18 00000000                 IMPORT           randomnumber
   19 00000000         
   20 00000000                 ENTRY
   21 00000000         
   22 00000000         zshw6
   23 00000000         ; randomnumber uses registers 0-2
   24 00000000         
   25 00000000 E59F3120        LDR              r3, =numbers
   26 00000004 E59F6120        LDR              r6, =ones   ; Move address of r
                                                            6 to store number o
                                                            f ones
   27 00000008 E3A0A000        MOV              r10, #0     ; Reserve r10 for c
                                                            ounter 
   28 0000000C EB000005        BL               getRandomNum ; Branch to get ra
                                                            ndom numbers
   29 00000010 E3A0A000        MOV              r10, #0
   30 00000014 E1A07003        MOV              r7, r3      ; Store address of 
                                                            numbers to a second
                                                             register
   31 00000018 EB00000C        BL               bubSort
   32 0000001C E3A0A000        MOV              r10, #0     ; Reset counter
   33 00000020 EB000016        BL               loader      ; Load the numbers,
                                                             count how many one
                                                            s,
   34 00000024 EA00003E        BAL              done        ; store the number 
                                                            of ones in mem
   35 00000028         
   36 00000028         getRandomNum
   37 00000028 E35A0000        CMP              r10, #0     ; Check if first it
                                                            eration of getRando
                                                            mNum
   38 0000002C 01A0B00E        MOVEQ            r11, lr     ; Store link regist
                                                            er
   39 00000030 EBFFFFFE        BL               randomnumber ; branch to random
                                                            number



ARM Macro Assembler    Page 2 


   40 00000034 E5830000        STR              r0, [r3]    ; Store random numb
                                                            er at address in r3
                                                            
   41 00000038 E28AA001        ADD              r10, r10, #1 ; Increment
   42 0000003C E35A000B        CMP              r10, #11    ; Check for complet
                                                            ion of iteration
   43 00000040 01A0E00B        MOVEQ            lr, r11     ; Load link registe
                                                            r back to zswh6 if 
                                                            done
   44 00000044 012FFF1E        BXEQ             lr
   45 00000048 E2833004        ADD              r3, r3, #4  ; If not done, move
                                                             to next mem locati
                                                            on
   46 0000004C EAFFFFF5        BAL              getRandomNum ; Iterate
   47 00000050         
   48 00000050         bubSort
   49 00000050 E1A08007        MOV              r8, r7      ; Get address in se
                                                            cond register (r7 f
                                                            irst operand addres
                                                            s)
   50 00000054 E2488004        SUB              r8, r8, #4  ; Moving to next op
                                                            erand address (r8 s
                                                            econd operand addre
                                                            ss)
   51 00000058 E5970000        LDR              r0, [r7]    ; Load first operan
                                                            d 
   52 0000005C E5981000        LDR              r1, [r8]    ; Load second opera
                                                            nd
   53 00000060 E1500001        CMP              r0, r1      ; Compare for sorti
                                                            ng
   54 00000064 C5880000        STRGT            r0, [r8]    ; If first operand 
                                                            is greater than sec
                                                            ond, switch locatio
                                                            n/sort
   55 00000068 C5871000        STRGT            r1, [r7]    ;     "      "
   56 0000006C E28AA001        ADD              r10, r10, #1 ; Increment counte
                                                            r to end loop
   57 00000070 E1A07008        MOV              r7, r8      ; Load next memory 
                                                            address as first op
                                                            erand
   58 00000074 E35A000A        CMP              r10, #10    ; Check if sorting 
                                                            is done
   59 00000078 012FFF1E        BXEQ             lr          ; If done branch ba
                                                            ck to main program
   60 0000007C EAFFFFF3        BAL              bubSort     ; If not, loop back
                                                             to continue sortin
                                                            
   61 00000080         
   62 00000080         
   63 00000080         loader
   64 00000080 E35A0000        CMP              r10, #0     ; First iteration s
                                                            tore link register
   65 00000084 01A0B00E        MOVEQ            r11, lr
   66 00000088 E35A000B        CMP              r10, #11    ; Check for end of 
                                                            iteration, branch b
                                                            ack if end
   67 0000008C 01A0E00B        MOVEQ            lr, r11
   68 00000090 012FFF1E        BXEQ             lr
   69 00000094         



ARM Macro Assembler    Page 3 


   70 00000094 E3A09000        MOV              r9, #0      ; Reset counter eac
                                                            h iteration
   71 00000098         
   72 00000098 E5934000        LDR              r4, [r3]    ; Load num to count
                                                             ones
   73 0000009C EB000004        BL               findOnes    ; Branch to sub to 
                                                            count ones
   74 000000A0 E5869000        STR              r9, [r6]    ; store number of o
                                                            nes at address of r
                                                            6
   75 000000A4 E2433004        SUB              r3, r3, #4  ; Move to next numb
                                                            ers address
   76 000000A8 E2866004        ADD              r6, r6, #4  ; Move to next addr
                                                            ess for storing
   77 000000AC E28AA001        ADD              r10, r10, #1 ; Increment
   78 000000B0 EAFFFFF2        BAL              loader      ; Iterate
   79 000000B4         
   80 000000B4         findOnes
   81 000000B4 E3540000        CMP              r4, #0      ; Check for complet
                                                            ion
   82 000000B8 012FFF1E        BXEQ             lr
   83 000000BC E2445001        SUB              r5, r4, #1  ; Count "1" off by 
                                                            subtracting it
   84 000000C0 E0044005        AND              r4, r4, r5  ; Remove the one fr
                                                            om the orginal numb
                                                            er
   85 000000C4 E2899001        ADD              r9, r9, #1  ; Add one to counte
                                                            r
   86 000000C8 EAFFFFF9        BAL              findOnes    ; Iterate
   87 000000CC         
   88 000000CC 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    numbers %                11*4
   89 000000F8 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00    ones    %                11*4
   90 00000124         done
   91 00000124 EF000011        SWI              &11
   92 00000128         
   93 00000128                 END
              00000000 
              00000000 
Command Line: --debug --xref --bi --apcs=interwork --depend=.\zshw6.3.d -o.\zsh
w6.3.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EVAL S
ETA 1" --list=.\zshw6.3.lst ZSHW6.3.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ZSHW6 00000000

Symbol: ZSHW6
   Definitions
      At line 16 in file ZSHW6.3.s
   Uses
      None
Comment: ZSHW6 unused
bubSort 00000050

Symbol: bubSort
   Definitions
      At line 48 in file ZSHW6.3.s
   Uses
      At line 31 in file ZSHW6.3.s
      At line 60 in file ZSHW6.3.s

done 00000124

Symbol: done
   Definitions
      At line 90 in file ZSHW6.3.s
   Uses
      At line 34 in file ZSHW6.3.s
Comment: done used once
findOnes 000000B4

Symbol: findOnes
   Definitions
      At line 80 in file ZSHW6.3.s
   Uses
      At line 73 in file ZSHW6.3.s
      At line 86 in file ZSHW6.3.s

getRandomNum 00000028

Symbol: getRandomNum
   Definitions
      At line 36 in file ZSHW6.3.s
   Uses
      At line 28 in file ZSHW6.3.s
      At line 46 in file ZSHW6.3.s

loader 00000080

Symbol: loader
   Definitions
      At line 63 in file ZSHW6.3.s
   Uses
      At line 33 in file ZSHW6.3.s
      At line 78 in file ZSHW6.3.s

numbers 000000CC

Symbol: numbers
   Definitions
      At line 88 in file ZSHW6.3.s
   Uses
      At line 25 in file ZSHW6.3.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: numbers used once
ones 000000F8

Symbol: ones
   Definitions
      At line 89 in file ZSHW6.3.s
   Uses
      At line 26 in file ZSHW6.3.s
Comment: ones used once
zshw6 00000000

Symbol: zshw6
   Definitions
      At line 22 in file ZSHW6.3.s
   Uses
      At line 17 in file ZSHW6.3.s
Comment: zshw6 used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

randomnumber 00000000

Symbol: randomnumber
   Definitions
      At line 18 in file ZSHW6.3.s
   Uses
      At line 39 in file ZSHW6.3.s
Comment: randomnumber used once
1 symbol
343 symbols in table

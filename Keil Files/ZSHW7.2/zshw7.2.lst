


ARM Macro Assembler    Page 1 


    1 00000000         ;******************************************************
    2 00000000         ; CS 2400 Homework 7
    3 00000000         ; By: Zachary Stall
    4 00000000         ; Version: 2
    5 00000000         ;
    6 00000000         ; This program takes a message stored in memory
    7 00000000         ; and using a 'secret' key, encrypts the message, and 
    8 00000000         ; decrypts the message. After decyption the program 
    9 00000000         ; compares the new message to the original.
   10 00000000         ;
   11 00000000         ; The subroutine store the registers to a stack, 
   12 00000000         ; and at the end of the subroutine they are pop'ed 
   13 00000000         ; back to original state.
   14 00000000         ;
   15 00000000         ; The program also implements a jump or branch table. 
   16 00000000         ; Note: Use for memory map 0x00000000, 0xFFFFFFFF
   17 00000000         ;******************************************************
   18 00000000         
   19 00000000                 AREA             ZSHW72, CODE, READWRITE
   20 00000000                 ENTRY
   21 00000000         
   22 00000000         main
   23 00000000 E59FD1F0        LDR              sp, =TOS    ; Top Of Stack
   24 00000004 E28F0024        ADR              r0, jumpTable
   25 00000008 E59F11EC        LDR              r1, =EOS    ; End Of Stack
   26 0000000C E59F21EC        LDR              r2, =message
   27 00000010 E59F31EC        LDR              r3, =scrtKey
   28 00000014 E59F41EC        LDR              r4, =encryptMssg
   29 00000018 E59F51EC        LDR              r5, =decryptMssg
   30 0000001C         
   31 0000001C EB000002        BL               jumpFunc    ; Branch to the jum
                                                            p table
   32 00000020 EB000001        BL               jumpFunc
   33 00000024 EB000000        BL               jumpFunc
   34 00000028 EBFFFFFF        BL               jumpFunc
   35 0000002C         
   36 0000002C         jumpFunc
   37 0000002C E490F004        LDR              pc, [r0], #4 ; load jumpt table
                                                             address
   38 00000030         
   39 00000030         jumpTable
   40 00000030 00000000        DCD              encrypt     ; encrypt message
   41 00000034 00000000        DCD              decrypt     ; decrypt message
   42 00000038 00000000        DCD              compare     ; compare decrypted
                                                             with original
   43 0000003C 00000000        DCD              done
   44 00000040         
   45 00000040         encrypt
   46 00000040 E1A0C00E        MOV              r12, lr     ; store link regist
                                                            er to return to mai
                                                            n
   47 00000044 E92D003F        PUSH             {r0, r1, r2, r3, r4, r5} ; push
                                                             registers to prese
                                                            rve their values
   48 00000048 E5930000        LDR              r0, [r3]    ; load secret key i
                                                            nto r0
   49 0000004C         
   50 0000004C         encryptLoop
   51 0000004C E1A03002        MOV              r3, r2      ; move message addr



ARM Macro Assembler    Page 2 


                                                            ess to r9
   52 00000050 E5929000        LDR              r9, [r2]    ; move first byte o
                                                            f message to r3
   53 00000054 E3590000        CMP              r9, #0      ; check for termina
                                                            ting zero
   54 00000058 1B000017        BLNE             permutations
   55 0000005C 10211000        EORNE            r1, r1, r0  ; encrypt
   56 00000060 15841000        STRNE            r1, [r4]    ; store encrypted b
                                                            yte in mem
   57 00000064 12844004        ADDNE            r4, r4, #4  ; move to next mem 
                                                            location
   58 00000068 12822004        ADDNE            r2, r2, #4  ; get next byte to 
                                                            encrypt
   59 0000006C 1AFFFFF6        BNE              encryptLoop
   60 00000070         
   61 00000070 E8BD003F        POP              {r0, r1, r2, r3, r4, r5} 
                                                            ; restore registers
                                                            
   62 00000074 E1A0E00C        MOV              lr, r12     ; load link registe
                                                            r
   63 00000078 E12FFF1E        BX               lr
   64 0000007C         
   65 0000007C         decrypt
   66 0000007C E1A0C00E        MOV              r12, lr     ; store link regist
                                                            er
   67 00000080 E92D003F        PUSH             {r0, r1, r2, r3, r4, r5} ; push
                                                             registers to prese
                                                            rve their values
   68 00000084 E5930000        LDR              r0, [r3]    ; load secret messa
                                                            ge
   69 00000088         
   70 00000088         decryptLoop
   71 00000088 E1A03004        MOV              r3, r4      ; load address of s
                                                            ecret message
   72 0000008C E5949000        LDR              r9, [r4]    ; load first byte o
                                                            f secret message
   73 00000090 E3590000        CMP              r9, #0      ; look for terminat
                                                            ing zero
   74 00000094 10299000        EORNE            r9, r9, r0  ; decrypt with key
   75 00000098 15849000        STRNE            r9, [r4]    ; store permutated 
                                                            message
   76 0000009C 1B000006        BLNE             permutations ; restore original
                                                             message
   77 000000A0 15851000        STRNE            r1, [r5]    ; store decrypted m
                                                            essage
   78 000000A4 12855004        ADDNE            r5, r5, #4  ; move to next mem 
                                                            location
   79 000000A8 12844004        ADDNE            r4, r4, #4  ; move to next mem 
                                                            location
   80 000000AC 1AFFFFF5        BNE              decryptLoop ; loop
   81 000000B0         
   82 000000B0 E8BD003F        POP              {r0, r1, r2, r3, r4, r5} 
                                                            ; restore register
   83 000000B4 E1A0E00C        MOV              lr, r12     ; restore link regi
                                                            ster
   84 000000B8 E12FFF1E        BX               lr
   85 000000BC         
   86 000000BC         permutations
   87 000000BC E5D35000        LDRB             r5, [r3]    ; store first byte



ARM Macro Assembler    Page 3 


   88 000000C0 E5D36001        LDRB             r6, [r3, #1] 
                                                            ; store second byte
                                                            
   89 000000C4 E5D37002        LDRB             r7, [r3, #2] ; store third byte
                                                            
   90 000000C8 E5D38003        LDRB             r8, [r3, #3] 
                                                            ; store fourth byte
                                                            
   91 000000CC E1A01405        LSL              r1, r5, #8  ; permutate bytes
   92 000000D0 E0811006        ADD              r1, r1, r6
   93 000000D4 E1A01401        LSL              r1, r1, #8
   94 000000D8 E0811007        ADD              r1, r1, r7
   95 000000DC E1A01401        LSL              r1, r1, #8
   96 000000E0 E0811008        ADD              r1, r1, r8
   97 000000E4 E12FFF1E        BX               lr
   98 000000E8         
   99 000000E8         compare
  100 000000E8 E92D003F        PUSH             {r0, r1, r2, r3, r4, r5} ; stor
                                                            e registers on stac
                                                            k
  101 000000EC E1A0C00E        MOV              r12, lr     ; store link regist
                                                            er
  102 000000F0         
  103 000000F0         compareLoop
  104 000000F0 E5920000        LDR              r0, [r2]    ; load first byte o
                                                            f original message
  105 000000F4 E5951000        LDR              r1, [r5]    ; load first byte o
                                                            f decrypted message
                                                            
  106 000000F8 E1500001        CMP              r0, r1      ; compare the two
  107 000000FC 02822004        ADDEQ            r2, r2, #4  ; if equal, move to
                                                             next byte
  108 00000100 02855005        ADDEQ            r5, r5, #5  ;  " " " " " "
  109 00000104 E3500000        CMP              r0, #0      ; check for termina
                                                            ting zero
  110 00000108 1AFFFFF8        BNE              compareLoop ; loop until comple
                                                            te
  111 0000010C         
  112 0000010C E8BD003F        POP              {r0, r1, r2, r3, r4, r5} 
                                                            ; restore registers
                                                            
  113 00000110 E1A0E00C        MOV              lr, r12     ; restore link regi
                                                            ster
  114 00000114 E12FFF1E        BX               lr          ; link back
  115 00000118         
  116 00000118         done
  117 00000118 EF000011        SWI              &11
  118 0000011C         
  119 0000011C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    EOS     %                32*4        ; reserve memory fo
                                                            r stack (End Of Sta
                                                            ck)
  120 0000019C 00 00 00 
              00       TOS     %                1*4         ; reserve memory fo
                                                            r Top Of Stack
  121 000001A0 4E 69 63 
              65 20 54 
              72 79 00 
              00 00 00 message DCB              "Nice Try",0,0,0,0 ; message wi
                                                            th #0 for terminati
                                                            on
  122 000001AC 00 00 00 
              00 00 00 
              00 00    pad     %                2*4
  123 000001B4 46 41 43 
              45       scrtKey DCB              "FACE"
  124 000001B8 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    encryptMssg



ARM Macro Assembler    Page 5 


                               %                8*4
  125 000001D8 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    decryptMssg
                               %                8*4
  126 000001F8         
  127 000001F8                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=.\zshw7.2.d -o.\zshw7.2.
o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA 1
" --list=.\zshw7.2.lst ZSHW7.2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EOS 0000011C

Symbol: EOS
   Definitions
      At line 119 in file ZSHW7.2.s
   Uses
      At line 25 in file ZSHW7.2.s
Comment: EOS used once
TOS 0000019C

Symbol: TOS
   Definitions
      At line 120 in file ZSHW7.2.s
   Uses
      At line 23 in file ZSHW7.2.s
Comment: TOS used once
ZSHW72 00000000

Symbol: ZSHW72
   Definitions
      At line 19 in file ZSHW7.2.s
   Uses
      None
Comment: ZSHW72 unused
compare 000000E8

Symbol: compare
   Definitions
      At line 99 in file ZSHW7.2.s
   Uses
      At line 42 in file ZSHW7.2.s
Comment: compare used once
compareLoop 000000F0

Symbol: compareLoop
   Definitions
      At line 103 in file ZSHW7.2.s
   Uses
      At line 110 in file ZSHW7.2.s
Comment: compareLoop used once
decrypt 0000007C

Symbol: decrypt
   Definitions
      At line 65 in file ZSHW7.2.s
   Uses
      At line 41 in file ZSHW7.2.s
Comment: decrypt used once
decryptLoop 00000088

Symbol: decryptLoop
   Definitions
      At line 70 in file ZSHW7.2.s
   Uses
      At line 80 in file ZSHW7.2.s
Comment: decryptLoop used once
decryptMssg 000001D8

Symbol: decryptMssg



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 125 in file ZSHW7.2.s
   Uses
      At line 29 in file ZSHW7.2.s
Comment: decryptMssg used once
done 00000118

Symbol: done
   Definitions
      At line 116 in file ZSHW7.2.s
   Uses
      At line 43 in file ZSHW7.2.s
Comment: done used once
encrypt 00000040

Symbol: encrypt
   Definitions
      At line 45 in file ZSHW7.2.s
   Uses
      At line 40 in file ZSHW7.2.s
Comment: encrypt used once
encryptLoop 0000004C

Symbol: encryptLoop
   Definitions
      At line 50 in file ZSHW7.2.s
   Uses
      At line 59 in file ZSHW7.2.s
Comment: encryptLoop used once
encryptMssg 000001B8

Symbol: encryptMssg
   Definitions
      At line 124 in file ZSHW7.2.s
   Uses
      At line 28 in file ZSHW7.2.s
Comment: encryptMssg used once
jumpFunc 0000002C

Symbol: jumpFunc
   Definitions
      At line 36 in file ZSHW7.2.s
   Uses
      At line 31 in file ZSHW7.2.s
      At line 32 in file ZSHW7.2.s
      At line 33 in file ZSHW7.2.s
      At line 34 in file ZSHW7.2.s

jumpTable 00000030

Symbol: jumpTable
   Definitions
      At line 39 in file ZSHW7.2.s
   Uses
      At line 24 in file ZSHW7.2.s
Comment: jumpTable used once
main 00000000

Symbol: main



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 22 in file ZSHW7.2.s
   Uses
      None
Comment: main unused
message 000001A0

Symbol: message
   Definitions
      At line 121 in file ZSHW7.2.s
   Uses
      At line 26 in file ZSHW7.2.s
Comment: message used once
pad 000001AC

Symbol: pad
   Definitions
      At line 122 in file ZSHW7.2.s
   Uses
      None
Comment: pad unused
permutations 000000BC

Symbol: permutations
   Definitions
      At line 86 in file ZSHW7.2.s
   Uses
      At line 54 in file ZSHW7.2.s
      At line 76 in file ZSHW7.2.s

scrtKey 000001B4

Symbol: scrtKey
   Definitions
      At line 123 in file ZSHW7.2.s
   Uses
      At line 27 in file ZSHW7.2.s
Comment: scrtKey used once
19 symbols
352 symbols in table
